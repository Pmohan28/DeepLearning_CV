# -*- coding: utf-8 -*-
"""FaceDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16HAODN5KJ817D1Ai_tdBocZvLHkqepuA
"""

!pip install mtcnn

import mtcnn
from mtcnn.mtcnn import MTCNN
import cv2
import os
import pathlib
import glob
from glob import glob
import pandas as pd
from matplotlib.patches import Rectangle

from google.colab import drive

drive.mount('/content/gdrive',force_remount=True)
root_path = 'gdrive/My Drive/CNNProjects/PersonalImage'

path_images_test = glob('/content/gdrive/My Drive/CNNProjects/PersonalImage/Test/*')

filename ='/content/gdrive/My Drive/CNNProjects/PersonalImage/Test/ACDK7553.JPG'

filename

path_images_test

traininglabels = []
scale = 70
c = 1

for i in path_images_test:
  traininglabels.append(i.split('/'))
  c = c+1
traininglabels  = pd.DataFrame(traininglabels)

traininglabels

# face detection with mtcnn on a photograph
from matplotlib import pyplot
from mtcnn.mtcnn import MTCNN
# load image from file
# filename = 'test1.jpg'
pixels = pyplot.imread(filename)
# create the detector, using default weights
detector = MTCNN()
# detect faces in the image
faces = detector.detect_faces(pixels)
for face in faces:
	print(face)

# draw an image with detected objects
def draw_image_with_boxes(filename, result_list):
	# load the image
	data = pyplot.imread(filename)
	# plot the image
	pyplot.imshow(data,origin='upper')
	# get the context for drawing boxes
	ax = pyplot.gca()
	# plot each box
	for result in result_list:
		# get coordinates
		x, y, width, height = result['box']
		# create the shape
		rect = Rectangle((x, y), width, height, fill=False, color='red')
		# draw the box
		ax.add_patch(rect)
	# show the plot
	pyplot.show()

draw_image_with_boxes(filename, faces)

# Loading of Models
from keras.models import load_model

model = load_model('/content/gdrive/My Drive/CNNProjects/PersonalImage/facenet_keras.h5')
print (model.inputs)
print (model.outputs)

from os import listdir
from PIL import Image
from numpy import asarray
from matplotlib import pyplot
from mtcnn.mtcnn import MTCNN
from os.path import isdir
from os import listdir
from numpy import savez_compressed
from numpy import asarray

def extract_face(filename, required_size= (160,160)):
  image = Image.open(filename)
  # image   = Image.co('RGB')
  pixels = asarray(image)
  detector = MTCNN()
  results = detector.detect_faces(pixels)
  x1,y1,width,height = results[0]['box']
  x1,y1 = abs(x1),abs(y1)
  x2,y2 = x1 + width, y1 + height

  face = pixels[y1:y2,x1:x2]

  image = Image.fromarray(face)
  image = image.resize(required_size)
  face_array = asarray(image)
  return face_array

filename ='/content/gdrive/My Drive/CNNProjects/PersonalImage/Test/ACDK7553.JPG'
image = Image.open(filename)
  # image   = Image.co('RGB')
pixels = asarray(image)
detector = MTCNN()
results = detector.detect_faces(pixels)
print (results[0]['box'])

def load_faces(directory):
  faces = list()
  for filename in listdir(directory):
    path = directory + filename
    face = extract_face(path)
    faces.append(face)
  return faces

def load_dataset(directory):
  X,y = list(),list()
  for subdir in listdir(directory):
    path = directory + subdir + '/'
    if not isdir(path):
      continue
    faces = load_faces(path)
    labels = [subdir for _ in range(len(faces))]
    print('loaded %d examples for class: %s' %(len(faces),subdir))
    X.extend(faces)
    y.extend(labels)
  return asarray(X), asarray(y)

X_train,y_train = load_dataset('/content/gdrive/My Drive/CNNProjects/PersonalImage/Train/')
print (X_train.shape,y_train.shape)
X_test,y_test = load_dataset('/content/gdrive/My Drive/CNNProjects/PersonalImage/Test/')
print (X_test.shape,y_test.shape)
savez_compressed('/content/gdrive/My Drive/CNNProjects/PersonalImage/faces-dataset.npz', X_train, y_train, X_test, y_test)

import numpy as np
data = np.load('/content/gdrive/My Drive/CNNProjects/PersonalImage/faces-dataset.npz')
X_train,y_train, X_test,y_test = data['arr_0'], data['arr_1'], data['arr_2'], data['arr_3']
print('Loaded: ', X_train.shape, y_train.shape, X_test.shape, y_test.shape)

model = load_model('/content/gdrive/My Drive/CNNProjects/PersonalImage/facenet_keras.h5')
print (model)

def get_embedding(model, face_pixels):
	# scale pixel values
	face_pixels = face_pixels.astype('float32')
	# standardize pixel values across channels (global)
	mean, std = face_pixels.mean(), face_pixels.std()
	face_pixels = (face_pixels - mean) / std
	# transform face into one sample
	samples = np.expand_dims(face_pixels, axis=0)
	# make prediction to get embedding
	yhat = model.predict(samples)
	return yhat[0]

data = np.load('/content/gdrive/My Drive/CNNProjects/PersonalImage/faces-dataset.npz')
X_train, y_train, X_test, y_test = data['arr_0'], data['arr_1'], data['arr_2'], data['arr_3']
print('Loaded: ', X_train.shape, y_train.shape, X_test.shape, y_test.shape)
# load the facenet model
model = load_model('/content/gdrive/My Drive/CNNProjects/PersonalImage/facenet_keras.h5')
print('Loaded Model')

X_train_new = list()
for face_pixels in X_train:
  embedding = get_embedding(model,face_pixels)
  X_train_new.append(embedding)
X_train_new = asarray(X_train_new)
print (X_train_new.shape)

X_test_new = list()
for face_pixels in X_test:
  embedding = get_embedding(model,face_pixels)
  X_test_new.append(embedding)
X_test_new = asarray(X_test_new)
print (X_test_new.shape)

savez_compressed('/content/gdrive/My Drive/CNNProjects/PersonalImage/faces-embeddings.npz', X_train_new, y_train, X_test_new, y_test)

data = np.load('/content/gdrive/My Drive/CNNProjects/PersonalImage/faces-embeddings.npz')
X_train, y_train, X_test, y_test = data['arr_0'], data['arr_1'], data['arr_2'], data['arr_3']
print('Dataset:  train= %d, test = %d' % (X_train.shape[0], X_test.shape[0]))

from sklearn.preprocessing import Normalizer
in_encoder = Normalizer(norm='l2')
X_train = in_encoder.transform(X_train)
X_test = in_encoder.transform(X_test)

from sklearn.preprocessing import LabelEncoder
out_encoder = LabelEncoder()
out_encoder.fit(y_train)
y_train = out_encoder.transform(y_train)
y_test = out_encoder.transform(y_test)

from sklearn.svm import SVC

model = SVC(kernel='linear')
model.fit(X_train,y_train)

y_pred_train = model.predict(X_train)
y_pred_test = model.predict(X_test)

score_trai  = a